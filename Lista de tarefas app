import 'dart.async';
import 'dart:io';

import 'package:flutter/material.dart';
import 'package:path_provider/path_provider.dart';

void main() {
  runApp(MaterialApp(
    home: Home(),
  ));
}

class Home extends StatefulWidget {
  @override
  _HomeState createState() => _HomeState();
}

class _HomeState extends State<Home> {
  @override
  final _toDoController = TextEditingController();

  List _toDoList = [];
  Map<String, dynamic> _lastRemoved;
  int _lastRemovedPos;
  @override
  void initState() {
    super.initState();
    _readLista().then((data) {
      setState(() {
        _toDoList = json.decode(data);
      });
    });
  }

  void _addToDo() {
    setState(() {
      //setState para atualizar a tela
      Map<String, dynamic> newToDo = Map();
      newTodo["Title"] = _toDoController.text;
      _toDoController.text = "";
      newTodo["Ok"] = false;
      _toDoList.add(newToDo);

      _saveLista();
    });
  }
  
  Future<Null>_refresh() async{
    await Future.delayed(Duration(seconds: 1));
     setState((){
       _toDolist.sort((a,b){
      if(a["Ok"] && !b["Ok"]){return 1;}
      else if(!a["Ok"] && b["Ok"]){return -1;}
      else {return 0;}
      
      
    });//Ordenando a lista
    
    _saveLista();
    
     });
    return null;
    
  }

  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Lista de tarefas"),
        backgroundColor: Colors.blueGrey,
        centerTitle: true,
      ), // Barra
      body: Column(children: <Widget>[
        Container(
          padding: EdgeInsets.fromLTRB(17.0, 1.0, 7.0, 1.0),
          child: Row(
            children: <Widget>[
              Expanded(
                child: TextField(
                    controller: _toDoController,
                    decoration: InputDecoration(
                        labelText: "Nova Tarefa.",
                        labelStyle: TextStyle(color: Colors.blueGrey))),
              ),
              RaisedButton(
                color: Colors.blueGrey,
                child: Text("ADD"),
                textColor: Colors.white,
                onPressed: _addToDo,
              )
            ],
          ),
        ),
        Expanded(
          child: RefreshIndicator(onRefresh: _resfresh , 
                                  child:ListView.builder(
              padding: EdgeInsets.only(top: 10.0),
              itemCount: _toDoList.length,
              itemBuilder: buildItem),),
        )
      ]),
    );
  }
  Widget buildItem(BuildContext context,int index){
    return Dismissible(//Colocando icone da lixeira
      key: Key(DateTime.now().millisecondsSinceEpoch.toString()),
      background: Container(
        color: Colors.red,
        child: Align(
          alignment: Alignment (-0.9.0.0),
          child: Icon(Icons.delete, color: colors.white,),
        ),
      ),
      direction: DismissibleDirection.starToEnd,
      child: CheckboxListTile(
                  title: Text(_toDoListe[index]["Title"]),
                  value: _toDoListe[index]["Ok"],
                  secondary: CircleAvatar(
                    child: Icon(
                        _toDoList[index]["Ok"] ? Icons.check : Icons.error),
                  ),
                  onChanged: (c) {
                    setState(() {
                      _toDoList[index]["Ok"] = c;
                      _saveLista();
                    });
                  },
                );//checkboxListTile
      onDismissed (direction){
        setState((){
           _lastRemoved = Map.from(_toDoList[index]);
        _lastRemovedPos=index;
        _toDoList.removeAt(index);
        
        _saveLista();
          
          final snack = SnackBar(
            content : Text("Tarefa ${_lasRemove["Title"]} Removida!"),
            action:SnackBarAction(label: "Desfazer", onPressed : (){
              _toDoList.insert(_lastRemovedPos,_lastRemoved);
              _saveLista();
            }),
            duration: Duration(seconds: 1),
          );//snackbar é utilizado para mostrar informação apra o usuario
          Scaffold.of(context).removeCurrentSnackBar();
          Scaffold.of(context).showSnackBar(snack);//Faz mostrar o snack a barra em baixo para desfazer a ação
          
        });//setState
       
      },
    );//Dismissible
  }
 /* Widget buildItem(context, index) {
                return CheckboxListTile(
                  title: Text(_toDoListe[index]["Title"]),
                  value: _toDoListe[index]["Ok"],
                  secondary: CircleAvatar(
                    child: Icon(
                        _toDoList[index]["Ok"] ? Icons.check : Icons.error),
                  ),
                  onChanged: (c) {
                    setState(() {
                      _toDoList[index]["Ok"] = c;
                      _saveLista();
                    });
                  },
                );//checkboxListTile
              } // responsavel por fazer os itens da lista*/

  Future<File> _getFile() async {
    final directory = await getApplicationDocumentsDirectory();
    return File("${directory.path}/lista.json");
  } //função que obtem o arquivo

  Future<File> _saveLista() async {
    String lista = json.encode(_toDoList);
    final file = await _getFile();
    return file.writeAsString(data);
  } //Funçõa para salvar dado no arquivo

  Future<String> _readLista() async {
    try {
      final file = await _getFile();
      return file.writeAsString();
    } catch (e) {
      return null;
    }
  } // função para ler o dado do arquivo
}
